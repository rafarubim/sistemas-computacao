Nomes:
Rafael Rubim	- 1511068
Gabriel Busquim - 1510549

	-> Questão 1)

Execute o programa dado (exemplo de uso 
de semáforos) e verifique / explique sua 
execução. 

	-> Código:

/* Exemplo de uso de semáforo*/
#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

union semun {
	int val;
	struct semid_ds *buf;
	ushort *array;
};

// inicializa o valor do semáforo
int setSemValue(int semId);

// remove o semáforo
void delSemValue(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main (int argc, char * argv[]) {
	int i;
	char letra = 'o';
	int semId;
	if (argc > 1) {
		semId = semget (8752, 1, 0666 | IPC_CREAT);
		setSemValue(semId);
		letra = 'x';
		sleep (2);
	}
	else {
		while ((semId = semget (8752, 1, 0666)) < 0) {
			putchar ('.');
			fflush(stdout);
			sleep (1);
		}
	}
	for (i=0; i<10;	i++) {
		semaforoP(semId);
		putchar (toupper(letra));
		fflush(stdout);
		sleep(rand() % 3);
		putchar(letra);
		fflush(stdout);
		semaforoV(semId);
		sleep(rand() % 2);
	}
	printf ("\nProcesso %d terminou\n", getpid());
	if (argc > 1) {
		sleep(10);
		delSemValue(semId);
	}
	return 0;
}

int setSemValue(int semId) {
	union semun semUnion;
	semUnion.val = 1;
	return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
	union semun semUnion;
	semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = -1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
	return 0;
}

int semaforoV(int semId) {
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = 1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
	return 0;
}

	-> Terminal:

[rafael@localhost lab6]$ gcc -Wall -o ex1 ex1.c
[rafael@localhost lab6]$ ./ex1 &
[1] 6252
.[rafael@localhost lab6]$ ..../ex.1 1
OoOoXxOoXxOoXxOoOoXxOoXxOoXxOoOoX
Processo 6252 terminou
xXxXxXx
Processo 6259 terminou
[1]+  Concluído              ./ex1

	-> Reflexão:

O programa fica preso em um loop infinito imprimindo quando executado sem parâmetros.Nós executamos ele assim em background. Ele só sairá do loop quando encontrar um semáforo de key 8752 na memoria. Quando executado com um parametro qualquer, o programa nao entra em loop e cria o semaforo de chave 8752. O semáforo é iniciado com valor 1 (significando que pode entrar na região crítica). Isso é por causa das flags passadas para a função semget (IPC_CREAT, IPC_EXCL). Essa função é similar à shmget, a key representa uma chave global do semáforo no pc e o id retornado por ela é um identificador usado no processo. Enquanto o programa rodava em background, chamamos ele de novo com um parâmetro. Os dois programas não estarão em loop infinito. Os dois programas irão repetir 10 vezes a entrada/saída de sua região crítica paralelamente antes de serem encerrados. Pela impressão, nenhum dos dois entrou na região crítica ao mesmo tempo que o outro, como esperado. Para entrar na região crítica, cada processo chama a função semaforoP (down), o que faz o lock do semáforo (diminuindo seu valor a zero) e para sair da região crítica, cada processo chama a função semaforoV (up) que faz o unlock do semaforo (aumentando novamente o valor do semaforo a 1). Para o mesmo processo não executar várias vezes seguidas rapidamente, foi utilizada a função sleep para rapidamente suspender o processo para que o outro executasse, a propósito de demonstração, para que os dois ficassem alternados. Ainda assim, houve horas que um mesmo processo entrou na região 2 vezes seguidas porque o sleep demorou demais ou não foi rápido o suficiente, já que foi feito de maneira randômica. Se o processo que destroi o semáforo terminar antes do outro, as funções semop passarão a retornar -1 (pois o semáforo não existe) e não travarão mais na entrada da região crítica. Isso poderia ser um problema se mais de um processo continuasse usando o semaforo após ele ser destruído.

	-> Questão 2)

Escreva um programa formado por dois 
processos concorrentes, leitor e impressor, que 
compartilham uma área de trabalho (memória) 
executando um loop infinito. Para sincronizar as 
suas ações, eles fazem uso de semáforos.
O processo leitor fica lendo caracteres da entrada 
padrão e colocando em um buffer de 16 posições. 
Quando o buffer está cheio o processo impressor 
deve imprimi-lo na saída padrão. 

	-> Código:

#include <sys/sem.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/shm.h>
#include <unistd.h>
#include <wait.h>

#define NUMREP 10
#define NUMCHAR 16

union semun {
	int val;
	struct semid_ds *buf;
	ushort *array;
};

void erro(const char* msg) {
	fprintf(stderr, "%s\n", msg);
	exit(1);
}

// inicializa o valor do semáforo
int startSemValue(int semId);

// remove o semáforo
int delSem(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main() {
	
	int pid, shmId, semId;
	char* cBuff;
	
	shmId = shmget(IPC_PRIVATE, NUMCHAR * sizeof(char), 0666 | IPC_CREAT | IPC_EXCL);
	
	if (shmId == -1) {
		erro("Falha ao criar memoria compartilhada");
	}
	
	cBuff = (char*) shmat(shmId, NULL, 0);
	
	if (cBuff == (char*) -1) {
		erro("Falha ao ligar a memoria compartilhada");
	}
	
	semId = semget(IPC_PRIVATE, 1, 0666 | IPC_CREAT | IPC_EXCL);
	
	if (semId == -1) {
		erro("Falha ao criar semaforo");
	}
	if (-1 == startSemValue(semId)) {
		erro("Falha ao iniciar semaforo");
	}
	
	if ((pid = fork()) < 0) {
		erro("Falha ao criar processo");
	}
	
	if (pid == 0) { // filho
		
		int r, i;
		char c = 'a';
		
		for(r = 0; r < NUMREP; r++) {
			semaforoP(semId);
				for(i = 0; i < NUMCHAR; i++) {
					cBuff[i] = c;
					c++;
					c = (c - 'a') % 26 + 'a';
				}
			semaforoV(semId);
			sleep(2);
		}
		
		if (-1 == shmdt(cBuff)) {
			erro("Nao foi possivel desconectar de memoria compartilhada");
		}
		
		exit(0);
	}
	
	sleep(1);
	
	{
		int i;
		for(i = 0; i < NUMREP; i++) {
			semaforoP(semId);
				fwrite(cBuff, sizeof(char), NUMCHAR, stdout);
				printf("*");
				fflush(stdout);
			semaforoV(semId);
			sleep(2);
		}
	}
	
	puts("");
	
	wait(NULL);
	
	if (-1 == delSem(semId)) {
		erro("Nao foi possivel deletar semaforo");
	}
	
	if (-1 == shmdt(cBuff)) {
		erro("Nao foi possivel desconectar de memoria compartilhada");
	}
	
	if(-1 == shmctl(shmId, IPC_RMID, NULL)) {
		erro("Falha ao destruir memoria compartilhada");
	}
	
	return 0;
}

int startSemValue(int semId) {
	union semun semUnion;
	semUnion.val = 1;
	return semctl(semId, 0, SETVAL, semUnion);
}

int delSem(int semId) {
	return semctl(semId, 0, IPC_RMID);
}

int semaforoP(int semId) {
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = -1;
	semB.sem_flg = SEM_UNDO;
	return semop(semId, &semB, 1);
}

int semaforoV(int semId) {
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = 1;
	semB.sem_flg = SEM_UNDO;
	return semop(semId, &semB, 1);
}

	-> Terminal:

[rafael@localhost lab6]$ gcc -Wall -o ex2 ex2.c
[rafael@localhost lab6]$ ./ex2
abcdefghijklmnop*qrstuvwxyzabcdef*ghijklmnopqrstuv*wxyzabcdefghijkl*mnopqrstuvwxyzab*cdefghijklmnopqr*stuvwxyzabcdefgh*ijklmnopqrstuvwx*yzabcdefghijklmn*opqrstuvwxyzabcd*

	-> Reflexão:

Nesse exercício criamos uma shared memory para que os processos pai e filho pudessem acessar o mesmo buffer de 16 caracteres. Fizemos o programa imprimir o alfabeto repetidamente de 16 em 16 caracteres na região crítica. Após tal impressão, o fim da região crítica permite o outro processo de entrar na sua região crítica e imprimir. Colocamos sleeps de maneira que os processos alternassem suas regiões críticas, impedindo que um deles entrasse duas vezes na própria, fazendo o que o exercício pedia. Não fizemos um loop infinito como especificado na questão, mas uma impressão de NUMREP vezes antes de encerrar o programa. Fizemos isso para que o programa possa adequadamente dar o detach e liberar a memória compartilhada e o semáforo no final do programa.

	-> Questão 3)

Faça programas para alterar um valor de 
uma variável na memória compartilhada. 
Um programa soma 1 à variável e o outro 
soma 5 à variável. Utilize semáforos para 
alterar a variável (região crítica). 

	-> Código:

#include <sys/sem.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/shm.h>
#include <unistd.h>
#include <wait.h>

#define NUMREP 100000

union semun {
	int val;
	struct semid_ds *buf;
	ushort *array;
};

void erro(const char* msg) {
	fprintf(stderr, "%s\n", msg);
	exit(1);
}

// inicializa o valor do semáforo
int startSemValue(int semId);

// remove o semáforo
int delSem(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main() {
	
	int pid, shmId, semId;
	int* shmBuff;
	
	shmId = shmget(IPC_PRIVATE, sizeof(int), 0666 | IPC_CREAT | IPC_EXCL);
	
	if (shmId == -1) {
		erro("Falha ao criar memoria compartilhada");
	}
	
	shmBuff = (int*) shmat(shmId, NULL, 0);
	
	if (shmBuff == (int*) -1) {
		erro("Falha ao ligar a memoria compartilhada");
	}
	
	semId = semget(IPC_PRIVATE, 1, 0666 | IPC_CREAT | IPC_EXCL);
	
	if (semId == -1) {
		erro("Falha ao criar semaforo");
	}
	if (-1 == startSemValue(semId)) {
		erro("Falha ao iniciar semaforo");
	}
	
	*shmBuff = 0;
	
	if ((pid = fork()) < 0) {
		erro("Falha ao criar processo");
	}
	
	if (pid == 0) { // filho
		int i;
		for(i = 0; i < NUMREP; i++) {
			semaforoP(semId);
				(*shmBuff)++;
			semaforoV(semId);
		}
		
		if (-1 == shmdt(shmBuff)) {
			erro("Nao foi possivel desconectar de memoria compartilhada");
		}
		
		exit(0);
	}
	
	{
		int i;
		for(i = 0; i < NUMREP; i++) {
			semaforoP(semId);
				*shmBuff += 5;
			semaforoV(semId);
		}
	}
	
	wait(NULL);
	
	printf("A soma final foi: %d (esperado: %d)\n", *shmBuff, NUMREP*6);
	
	if (-1 == delSem(semId)) {
		erro("Nao foi possivel deletar semaforo");
	}
	
	if (-1 == shmdt(shmBuff)) {
		erro("Nao foi possivel desconectar de memoria compartilhada");
	}
	
	if(-1 == shmctl(shmId, IPC_RMID, NULL)) {
		erro("Falha ao destruir memoria compartilhada");
	}
	
	return 0;
}

int startSemValue(int semId) {
	union semun semUnion;
	semUnion.val = 1;
	return semctl(semId, 0, SETVAL, semUnion);
}

int delSem(int semId) {
	return semctl(semId, 0, IPC_RMID);
}

int semaforoP(int semId) {
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = -1;
	semB.sem_flg = SEM_UNDO;
	return semop(semId, &semB, 1);
}

int semaforoV(int semId) {
	struct sembuf semB;
	semB.sem_num = 0;
	semB.sem_op = 1;
	semB.sem_flg = SEM_UNDO;
	return semop(semId, &semB, 1);
}

	-> Terminal:

[rafael@localhost lab6]$ gcc -Wall -o ex3 ex3.c
[rafael@localhost lab6]$ ./ex3
A soma final foi: 600000 (esperado: 600000)

	-> Reflexão:

Decidimos colocar as regiões críticas nesses processos como os comandos de somar 1 e 5 na memória compartilhada. Apesar da operação de soma parecer atômica, em baixo nível (como assembly), percebe-se que há mais de uma operação (copiar o número, somar, copiar de novo). Assim, sem o uso do semáforo, seria impossível garantir a coerência das somas em condição de corrida entre processos.
